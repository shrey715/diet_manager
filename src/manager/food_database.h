#ifndef FOOD_DATABASE_H
#define FOOD_DATABASE_H

#include <string>
#include <vector>
#include <memory>
#include <functional>
#include "../models/food.h"
#include <nlohmann/json.hpp>

using namespace std;
using json = nlohmann::json;

/**
 * FoodDatabase Class
 * This class manages the food database, including basic and composite foods.
 */
class FoodDatabase {
public:
    static FoodDatabase& getInstance();
    
    // Food database methods
    shared_ptr<Food> getFood(const string& id) const;
    vector<shared_ptr<Food>> getAllFoods() const;
    vector<shared_ptr<Food>> searchFoods(const vector<string>& keywords, bool matchAll = true) const;
    
    // Modified methods to use autogenerated IDs
    string addBasicFood(const vector<string>& keywords, float calories);
    string createCompositeFood(const vector<string>& keywords, 
                                  const map<string, float>& components);
    
    // Keep the original methods for compatibility
    void addBasicFood(const string& id, const vector<string>& keywords, float calories);
    void createCompositeFood(const string& id, const vector<string>& keywords, 
                            const map<string, float>& components);
    
    // Serialization
    void saveToFiles(const string& basicFoodPath = "", const string& compositeFoodPath = "");
    void loadFromFiles(const string& basicFoodPath = "", const string& compositeFoodPath = "");
    
    // Helper for extensibility (downloading food data from web sources)
    void registerFoodDataSource(const string& sourceName, 
                               function<vector<shared_ptr<BasicFood>>(const string&)> dataFunction);
    vector<shared_ptr<BasicFood>> importFromSource(const string& sourceName, const string& query);
    
private:
    FoodDatabase();
    ~FoodDatabase();
    FoodDatabase(const FoodDatabase&) = delete;
    FoodDatabase& operator=(const FoodDatabase&) = delete;
    
    map<string, shared_ptr<Food>> foods;
    string defaultBasicFoodPath;
    string defaultCompositeFoodPath;
    
    // Map of data source names to food data source functions
    map<string, function<vector<shared_ptr<BasicFood>>(const string&)>> foodDataSources;
    
    // Helper methods
    json basicFoodToJson(const BasicFood* food) const;
    json compositeFoodToJson(const CompositeFood* food) const;
    shared_ptr<BasicFood> basicFoodFromJson(const json& j) const;
    shared_ptr<CompositeFood> compositeFoodFromJson(const json& j) const;
    
    float calculateCompositeFoodCalories(const map<string, float>& components);
    
    // Helper methods for ID generation
    string generateFoodId(const string& baseKeyword);
    string sanitizeForId(const string& input);
    bool isIdUnique(const string& id) const;
};

#endif // FOOD_DATABASE_H
