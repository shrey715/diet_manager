@startuml Diet Manager

' Style settings
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam classFontSize 12
skinparam classBackgroundColor #E6F2FF
skinparam classBorderColor #3C7FB1
skinparam arrowColor #666666
skinparam packageBackgroundColor #EEEEEE

package "Models" {
  ' Food classes
  abstract class Food {
    -id: string
    -keywords: vector<string>
    +getId(): string
    +getKeywords(): vector<string>
    +{abstract} getCaloriesPerServing(): float
    +{abstract} isComposite(): bool
  }

  class BasicFood {
    -calories: float
    +getCaloriesPerServing(): float
    +isComposite(): bool
  }

  class CompositeFood {
    -components: map<string, float>
    -totalCalories: float
    +addComponent(foodId: string, servings: float): void
    +getComponents(): map<string, float>
    +setTotalCalories(calories: float): void
    +getCaloriesPerServing(): float
    +isComposite(): bool
  }

  ' User classes
  class User {
    -name: string
    -age: int
    -gender: Gender
    -height: float
    -weight: float
    -activityLevel: ActivityLevel
    -goal: Goal
    -calorieCalcMethod: CalorieCalculationMethod
    +calculateBMI(): float
    +calculateBMR(): float
    +calculateDailyCalorieNeeds(): float
    +calculateTargetCalories(): float
    +toJson(): json
    +{static} fromJson(j: json): User
  }
  
  enum "User::Gender" {
    MALE
    FEMALE
    OTHER
  }
  
  enum "User::ActivityLevel" {
    SEDENTARY
    LIGHT
    MODERATE
    ACTIVE
    VERY_ACTIVE
  }
  
  enum "User::Goal" {
    LOSE_WEIGHT
    MAINTAIN
    GAIN_WEIGHT
  }
  
  enum "User::CalorieCalculationMethod" {
    MIFFLIN_ST_JEOR
    HARRIS_BENEDICT
    WHO_EQUATION
  }

  ' Log classes
  class LogEntry {
    -date: string
    -foods: map<string, float>
    +addFood(foodId: string, servings: float): void
    +removeFood(foodId: string): void
    +getFoods(): map<string, float>
    +getDate(): string
    +setDate(date: string): void
    +toJson(): json
    +{static} fromJson(j: json): LogEntry
  }

  class LogHistory {
    -logs: map<string, LogEntry>
    -currentDate: string
    -commandHistory: vector<unique_ptr<Command>>
    -currentCommandIndex: size_t
    +getCurrentLog(): LogEntry*
    +getLog(date: string): LogEntry*
    +setCurrentDate(date: string): void
    +executeCommand(command: string, params: map<string, string>): void
    +canUndo(): bool
    +canRedo(): bool
    +undo(): void
    +redo(): void
    +toJson(): json
    +fromJson(j: json): void
  }

  abstract class "LogHistory::Command" {
    +{abstract} execute(): void
    +{abstract} unexecute(): void
    +{abstract} toString(): string
  }

  class "LogHistory::AddFoodCommand" {
    -log: LogEntry*
    -foodId: string
    -servings: float
    +execute(): void
    +unexecute(): void
    +toString(): string
  }

  class "LogHistory::RemoveFoodCommand" {
    -log: LogEntry*
    -foodId: string
    -servings: float
    +execute(): void
    +unexecute(): void
    +toString(): string
  }
}

package "Managers" {
  class FoodDatabase {
    -foods: map<string, shared_ptr<Food>>
    -foodDataSources: map<string, function>
    -defaultBasicFoodPath: string
    -defaultCompositeFoodPath: string
    +{static} getInstance(): FoodDatabase&
    +getFood(id: string): shared_ptr<Food>
    +getAllFoods(): vector<shared_ptr<Food>>
    +searchFoods(keywords: vector<string>, matchAll: bool): vector<shared_ptr<Food>>
    +addBasicFood(keywords: vector<string>, calories: float): string
    +createCompositeFood(keywords: vector<string>, components: map<string, float>): string
    +saveToFiles(basicFoodPath: string, compositeFoodPath: string): void
    +loadFromFiles(basicFoodPath: string, compositeFoodPath: string): void
    +registerFoodDataSource(sourceName: string, dataFunction: function): void
    +importFromSource(sourceName: string, query: string): vector<shared_ptr<BasicFood>>
  }

  class UserProfile {
    -user: User
    -defaultFilepath: string
    -isInitialized: bool
    +{static} getInstance(): UserProfile&
    +getUser(): User&
    +saveUser(filepath: string): void
    +loadUser(filepath: string): void
    +setUserAttribute(attribute: string, value: string): void
    +calculateTargetCalories(): float
    -initializeUserProfile(): void
    -ensureInitialized(): void
  }
}

package "Interface" {
  class CLI {
    -commands: map<string, CommandFunc>
    -helpText: map<string, string>
    -currentDate: string
    -foodDb: FoodDatabase&
    -userProfile: UserProfile&
    -logHistory: LogHistory
    +run(): void
    -registerCommands(): void
    -parseCommandLine(line: string): vector<string>
    -displayHelp(args: vector<string>): void
    -confirmAction(message: string): bool
    -viewLog(args: vector<string>): void
    -setDate(args: vector<string>): void
    -viewProfile(args: vector<string>): void
    -updateProfile(args: vector<string>): void
    -viewCalories(args: vector<string>): void
    -saveData(args: vector<string>): void
    -loadData(args: vector<string>): void
  }
}

package "Utilities" {
  class TerminalColors {
    +{static} colorize(text: string, color: string): string
    +{static} bold(text: string): string
    +{static} underline(text: string): string
    +{static} error(text: string): string
    +{static} success(text: string): string
    +{static} warning(text: string): string
    +{static} info(text: string): string
  }
}

' Relationships

' Inheritance relationships
Food <|-- BasicFood
Food <|-- CompositeFood
"LogHistory::Command" <|-- "LogHistory::AddFoodCommand"
"LogHistory::Command" <|-- "LogHistory::RemoveFoodCommand"

' Association relationships
User "1" -- "0..4" "User::Gender"
User "1" -- "0..5" "User::ActivityLevel"
User "1" -- "0..3" "User::Goal" 
User "1" -- "0..3" "User::CalorieCalculationMethod"
CLI -- FoodDatabase
CLI -- UserProfile
CLI -- LogHistory

' Aggregation relationships
LogHistory o-- LogEntry : contains
FoodDatabase o-- Food : manages

' Composition relationships
LogHistory *-- "LogHistory::Command" : owns
LogHistory *-- "LogHistory::AddFoodCommand" : creates
LogHistory *-- "LogHistory::RemoveFoodCommand" : creates
UserProfile *-- "1" User : owns
CompositeFood *-- "*" Food : references

' Special singleton relationship
note top of FoodDatabase: Singleton
note top of UserProfile: Singleton

@enduml